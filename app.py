import streamlit as st
import pandas as pd
import pickle
import json
import requests
import ast

def create_indices(df):
    return pd.Series(df.index, index=df['title']).drop_duplicates()

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ==========

def load_data():
    status = st.empty()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

    status.text("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º preprocessed_movies.csv...")
    df = pd.read_csv('preprocessed_movies.csv')
    indices = create_indices(df)

    status.text("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º cosine_sim_tfidf.pkl...")
    with open('cosine_sim_tfidf.pkl', 'rb') as f:
        cosine_sim_tfidf = pickle.load(f)

    status.text("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º cosine_sim_count.pkl...")
    with open('cosine_sim_count.pkl', 'rb') as f:
        cosine_sim_count = pickle.load(f)

    status.success("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    return df, cosine_sim_tfidf, cosine_sim_count, indices

# ========== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ==========

def get_recommendations(title, cosine_sim, indices, df, n=10):
    try:
        idx = indices[title]
        sim_scores = list(enumerate(cosine_sim[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:n+1]
        movie_indices = [i[0] for i in sim_scores]
        return df['title'].iloc[movie_indices].tolist()
    except KeyError:
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω

# ========== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ==========

st.set_page_config(page_title="üé¨ Movie Recommender", layout="wide")
st.markdown("<h1 style='text-align: center;'>üé• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å–º–æ–≤</h1>", unsafe_allow_html=True)
st.write("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üéØ")

# OMDb API –∫–ª—é—á
TMDB_API_KEY = st.secrets["TMDB_API_KEY"]
def get_poster(imdbid):
    """–ü–æ–ª—É—á–∏—Ç—å URL –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ –ø–æ imdbid —á–µ—Ä–µ–∑ TMDb API."""
    url = f"https://api.themoviedb.org/3/find/{imdbid}?api_key={TMDB_API_KEY}&external_source=imdb_id"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data['movie_results']:
            poster_path = data['movie_results'][0].get('poster_path')
            if poster_path:
                base_url = "https://image.tmdb.org/t/p/w500"
                return f"{base_url}{poster_path}"  # –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—ã–π URL –ø–æ—Å—Ç–µ—Ä–∞
    return None  # –í–µ—Ä–Ω—É—Ç—å None, –µ—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
    df, sim_tfidf, sim_count, title_indices = load_data()

# –ü–æ–ª–µ –≤–≤–æ–¥–∞
movie_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞", "", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Inception")

# –°–ª–∞–π–¥–µ—Ä ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
top_n = st.slider("–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", min_value=5, max_value=20, value=10)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
method = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
    options=["TF-IDF", "CountVectorizer"]
)

df['year'] = df['release_date'].str[:4]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
if movie_name:
    with st.spinner("–ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã..."):
        if method == "TF-IDF":
            recommendations = get_recommendations(movie_name, sim_tfidf, title_indices, df, n=top_n)
        else:
            recommendations = get_recommendations(movie_name, sim_count, title_indices, df, n=top_n)

    if recommendations:
        st.subheader(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({method}) –¥–ª—è: {movie_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
        cols = st.columns(len(recommendations))  # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫, —Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤
        
        for idx, rec in enumerate(recommendations):
            with cols[idx]:  # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å–º –≤ —Å–≤–æ–µ–π –∫–æ–ª–æ–Ω–∫–µ
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É DataFrame –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å–º–∞
                movie_row = df[df['title'] == rec]
                if not movie_row.empty:
                    imdbid = movie_row.iloc[0]['imdb_id']  # –ü–æ–ª—É—á–∞–µ–º imdbid
                    poster_url = get_poster(imdbid)  # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ—Å—Ç–µ—Ä–∞
                    if poster_url:
                        st.image(poster_url, width=1000)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å—Ç–µ—Ä
                    else:
                        st.write("–ü–æ—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –∏ –∞–∫—Ç–µ—Ä–æ–≤ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤
                    director = movie_row.iloc[0]['director']  # –ë–µ—Ä–µ–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞
                    actors = movie_row.iloc[0]['actors']  # –ë–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É –∞–∫—Ç–µ—Ä–æ–≤ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
                    try:
                        actors = ast.literal_eval(actors)
                    except (ValueError, SyntaxError):
                        actors = []  # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ actors ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
                    if not isinstance(actors, list):
                        actors = []
                    actors = [str(actor).strip() for actor in actors]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                    st.markdown(f"<p style='font-size:20px; font-family:Merriweather, serif; font-weight:bold;'>{rec}</p>", unsafe_allow_html=True)
                    st.markdown(f"**–ì–æ–¥:** {movie_row.iloc[0]['year']}")  # –ì–æ–¥ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    st.markdown(f"**–†–µ–∂–∏—Å—Å–µ—Ä:** <br> {director}", unsafe_allow_html=True)
                    st.markdown(f"**–ê–∫—Ç–µ—Ä—ã:** <br> {'<br>'.join(actors)}", unsafe_allow_html=True)
                    st.markdown(poster_url)
    else:
        st.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (—Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ).")